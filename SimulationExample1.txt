Simulation Environment {
    Node startNode = Create<IONode>();
    Node endNode = Create<IONode>();

    Road townRoad = Create<TownRoad>(50, 1000, startNode, endNode);
    Road countryRoad = Create<LandevejRoad>(80, 1000, startNode, endNode);
    List<Node> IONodes {startNode, endNode};
    List<Node> intersectionConnections {startNode, endNode};

    List<Road> roads {townRoad, countryRoad};

    InitCondition<Car> {
        if(Simulation.CurrentTick % 5 == 0) {
            Simulation.VehicleList.Add(Create<Car>(townRoad, countryRoad, Simulation.VehicleList.Length));
        }
    }

    EndCondition{
        return Simulation.CurrentTick > 100;
    }
}

Simulation Behavior {
    Node IONode {

    }

    Vehicle Car {
        number id;
        number direction;
        number brakeDistance = 10;
        number speed;
        number position;
        Road road;
        Road previousRoad;

        constructor Create<Car>(Road townRoad, Road countryRoad, number id) {
        this.id = id;
            direction = Simulation.Random(0, 1);
            if(Simulation.Random(0,1) > 0.5) {
                road = townRoad;
                previousRoad = townRoad;
                speed = 50;
            } else {
                road = countryRoad;
                previousRoad = countryRoad;
                speed = 50;
            }
        }

        function void Drive() {
            this.speed = this.road.speedLimit;
            this.position = this.position + this.speed;
            Simulation.Print("WWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWW");
            Simulation.Print(this.id);
            Simulation.Print(this.position);
            Simulation.Print(this.speed);
            Simulation.Print(this.road.speedLimit);

        }

        function void Brake() {
            this.speed = 0;
        }

        function bool isClearToDrive() {
            bool result = true;
            for(Car car in range this.road.carList) {
                if(car.direction == this.direction) {
                    if(this.isCarInFront(car) == true) {
                        result = false;
                    }
                }
            }
            return result;
        }

        function bool isCarInFront(Car otherCar) {
            number positionDiff = this.position - this.position;
            if(positionDiff > 0 && positionDiff < 5) {
                return true;
            }
            return false;
        }

        function void newSpeedLimit() {
            if(this.road.speedLimit < this.previousRoad.speedLimit && this.speed > this.road.speedLimit) {
                this.speed = this.road.speedLimit;
            }
        }
    }

    Road TownRoad {
        number speedLimit;
        List<Vehicle> carList;
        constructor Create<TownRoad>(number speedLimit, number length, Node startNode, Node endNode) {
            this.speedLimit = speedLimit;
            this.length = length;
            this.startNode = startNode;
            this.endNode = endNode;
        }
    }

    Road LandevejRoad {
        number speedLimit;
        List<Vehicle> carList;
        constructor Create<LandevejRoad>(number speedLimit, number length, Node startNode, Node endNode) {
            this.speedLimit = speedLimit;
            this.length = length;
            this.startNode = startNode;
            this.endNode = endNode;
        }
    }
}

Simulation Update {
    switch(vehicle.Type) {
        case "Car" {
            //Checks if the agent is clear to drive, with the function "IsClearToDrive"
            if (vehicle.isClearToDrive()) {
                //Tells the agent to drive, with the function "Drive"
                vehicle.Drive();
            } else {
                //Tells the agent to break, with the function "Break"
                vehicle.Brake();
            }
        }
        default {
            //Default case. This should in theory never be triggered
        }
    }
}

Simulation Output {

}

