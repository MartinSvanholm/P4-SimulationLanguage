//Mandatory "Environment" section
//This functions as the setup for the simulation
Simulation Environment {
    //Initializing nodes and intersections
    Node startNode = Create<IONode>();
    Node endNode = Create<IONode>();
    Road road1 = Create<Road1>();
    Road road2 = Create<Road2>();

    List<Node> IONodes {startNode, endNode};
    List<Node> intersectionConnections {startNode, endNode};
    //Node intersection = Create<Ligthregulation>(intersectionConnections);

    //Putting the roads in a list
    List<Road> roadList {road1, road2};

    //Defining the condition for when to initialize a new car
    InitCondition<Car> {
        //Creates a car every 5 ticks
        if (Simulation.CurrentTick % 5 == 0) {
            Simulation.Agents.Add(Create<Car>());
        }
    }

    //Defining the end condition for the simulation
    EndCondition {
        return Simulation.CurrentTick >= 2000;
    }
}

//Mandatory "behavior" section
//Here the user defines the classes and their behavior
Simulation Behavior {
    //Initializing roads
    Road Road1 {
        speedLimit = 50;
        length = 1000;
    }

    Road Road2 {
        speedLimit = 50;
        length = 1000;
    }

    //Defining the "Car" class
    Vehicle Car {
        number weight;
        number breakDistance = 10;
        number breakPower = 3;
        string direction;
        Road road = Create<Road1>();

        //The constructor for the class
        constructor Create<Car>() {
            this.length = Random(4, 5);
            this.speed = 0;
            this.position = 0;
            this.acceleration = Random(2, 3);
            this.weight = Random(900, 1200);

            //Creates a random start- and end-node for the car
            List<Node> tempNodes;
            //tempNodes.Add(Nodes[RandomInt(0, IONodes.length)]);
            bool Sentinal = true;

            /*
            while(Sentinal) {
                Node node;
                if(node != this.tempNodes[0]) {
                    this.tempNodes.Add(Nodes[RandomInt(0, IONodes.length)]);
                    Sentinal = false;
                }
            }
            */

            //Generates the optimal path between the start- and end-node
            //this.path = this.PathFinding();

            //Determines the driving direction for the car.
            if (nodes.GetIndex(path[0]) < nodes.GetIndex(path[1])) {
                this.direction = true;
            } else {
                this.direction = false;
            }
        }

        //Function to check if the car should be able to move
        function bool IsClearToDrive() {
            bool isCarInfront;
            List<Vehicle> tempList;

            //Adds all cars on the same road, and going in the same direction, to a temporary list
            for (car in range this.road.carList) {
                if(car.direction == this.direction) {
                    tempList.Add(car);
                }
            }

            //Sorting the temporary list based on the position of the cars
            tempList.Sort(Car.position);

            /*
            //Checking if a car exists infront of the agent. If this is the case, that car is saved in a variable
            if(tempList.GetIndex(this) == (tempList.length - 1)) {
                isCarInfront = false;
            } else {
                isCarInfront = true;
                Vehicle carInFront = tempList[tempList.GetIndex(this) + 1];
            }*/

            //Returns true if the car has appropriate distance to drive, and false if it should start to break.
            return true;
        }

        //Accelerates the car, if appropriate, and propells the car forward
        function void Drive() {
            if(this.road.speedLimit < this.speed) {
                this.speed = this.speed + this.acceleration;
            }

            this.position = this.position + this.speed;
        }

        //Deaccelerated the car, and propells the car forward
        function void Break() {
            this.speed = this.speed + this.breakPower;

            if (this.speed <= 0) {
                this.speed = 0;
            }

            this.position = this.position + this.speed;
        }
    }

    //Defining the "IONode" class
    Node IONode {
        //The constructor for the class
        constructor Create<IONode>() {
        }
    }

    //Defining the "Lightregulation" class
    Node Ligthregulation {
        string lightState1;
        string lightState2;
        number timer = 0;

        //The constructor for the class
        constructor Create<Ligthregulation>(List<Node> connections) {
            this.connections = connections;
        }

        //Function changing the state of the traffic light, based on time
        function void ChangeLigth() {
            this.timer = Simulation.CurrentTick % 740;

            switch(Simulation.CurrentTick) {
                case 0 {
                    lightState1 = "red";
                    lightState2 = "red";
                }
                case 10 {
                    lightState1 = "red";
                    lightState2 = "yellowStart";
                }
                case 30 {
                    lightState1 = "red";
                    lightState2 = "green";
                }
                case 330 {
                    lightState1 = "red";
                    lightState2 = "yellowStop";
                }
                case 370 {
                    lightState1 = "red";
                    lightState2 = "red";
                }
                case 380 {
                    lightState1 = "yellowStart";
                    lightState2 = "red";
                }
                case 400 {
                    lightState1 = "green";
                    lightState2 = "red";
                }
                case 700 {
                    lightState1 = "yellowStop";
                    lightState2 = "red";
                }
                default {

                }
            }
        }
    }
}

//Mandatory "Update" section
//Here the main simulation logic is defined. Works as a foreach loop, looping over all instansiated agents
Simulation Update {

    //Switches based on the type of the vehicle the simulation is currently looking at
    switch(vehicle.Type) {
        case "Car" {
            //Checks if the agent is clear to drive, with the function "IsClearToDrive"
            if (vehicle.IsClearToDrive()) {
                //Tells the agent to drive, with the function "Drive"
                vehicle.Drive();
            } else {
                //Tells the agent to break, with the function "Break"
                vehicle.Break();
            }
        }
        default {
            //Default case. This should in theory never be triggered
            number test;
        }
    }
}

//Mandatory "Output" section
//Here the user defines what and how data is extracted from the simulation
Simulation Output {
    //Outputs the travel time for each agent. "Output.LogAgentTravelTime" is a predefined function in the language
    Output.LogAgentTravelTime();
}