//Mandatory "Environment" section
//This functions as the setup for the simulation
Simulation Environment {
    IONode NodeOne = Create<IONode>();
    List<IONode> tempConnections{NodeOne};
    IONode NodeTwo = Create<IONode>(tempConnections);
    tempConnections.Remove(0);
    tempConnections.Add(NodeTwo);
    NodeOne.connections = tempConnections;

    TownRoad RoadOne = Create<TownRoad>(50, 500, NodeOne, NodeTwo);

    InitCondition<Car>{
        if(Simulation.CurrentTick % 5 == 0){
            Simulation.Vehicles.Add(Create<Car>());
        }
    }

    EndCondition{
        return Simulation.CurrentTick > 100;
    }
}

//Mandatory "behavior" section
//Here the user defines the classes and their behavior
Simulation Behavior {
    Vehicle Car {
        number x = 1;
        number y ;

        function number Square(number x){
            return x*x;
        }

        function number DinMor(){
            return 3;
        }

        function number InLineFunc(number x) {
            number y = 2;
            Square(x) + y;
            x + y;
            y = Square(x) + y;

            return Square(x) + x;
        }

        function IfElseTest(){
            bool testBool = true;
            bool testBool2 = true;
            string str;

            if (testBool == true) {
                str = "If";
            } else if (testBool2 == true) {
                str = "Else If";
            } else {
                str = "Else";
            }
        }

        /* function SwitchTest(){
            number testNum = 2;
            string str;

            switch(testNum){
                case 1:
                    str = "case1";
                case 2:
                    str = "case2";
                default:
                    str = "default";
            }
        } */

        function WhileTest(){
            bool testBool = true;
            while(testBool == true) {
                Print("xd");
            }
        }

        function IndexTest() {
            List<number> numList {1,2,3};

            number x = numList[1];
        }

        constructor Create<Car>(){
            this.length = 10;
            this.acceleration = 200;
        }
    }

    Node IONode {
        constructor Create<IONode>(List<Node> connections){
            this.connections = connections;
        }

        constructor Create<IONode>(){
        }
    }

    Road TownRoad {
        number speedLimit;
        constructor Create<TownRoad>(number speedLimit, number length, Node startNode, Node endNode){
            this.speedLimit = speedLimit;
            this.length = length;
            this.startNode = startNode;
            this.endNode = endNode;
        }
    }
}

//Mandatory "Update" section
//Here the main simulation logic is defined. Works as a foreach loop, looping over all instansiated agents
Simulation Update {/*
    switch(Vehicle.type){
        case Car{
            Print(Vehicle.Square(Simulation.CurrentTick));
        }
        default{
            Print("Bling Blong");
        }
    }*/
}

//Mandatory "Output" section
//Here the user defines what and how data is extracted from the simulation
Simulation Output {
    Output.Log("EKS DEE");
}