//Mandatory "Environment" section
//This functions as the setup for the simulation
Simulation Environment {
    IONode NodeOne = Create<IONode>();
    List<IONode> tempConnections{NodeOne};
    IONode NodeTwo = Create<IONode>();
    NodeTwo.connections = tempConnections;
    tempConnections.Remove(0);
    tempConnections.Add(NodeTwo);
    NodeOne.connections = tempConnections;
    NodeTwo = NodeOne;

    Simulation.NodeList.Add(NodeOne);
    Simulation.NodeList.Add(NodeTwo);

    TownRoad RoadOne = Create<TownRoad>(50, 500, NodeOne, NodeTwo);

    InitCondition<Car>{
        if(Simulation.CurrentTick % 5 == 0){
            Simulation.VehicleList.Add(Create<Car>());
        }
    }

    InitCondition<Truck>{
        if(Simulation.CurrentTick % 10 == 0){
            Simulation.VehicleList.Add(Create<Truck>("Tonni"));
        }
    }

    EndCondition{
        return Simulation.CurrentTick > 100;
    }
}

//Mandatory "behavior" section
//Here the user defines the classes and their behavior
Simulation Behavior {
    Vehicle Car {
        number x = 1;
        number y ;

        function number Square(number x){
            return x*x;
        }

        function number DinMor(){
            return 3;
        }

        function number InLineFunc(number x) {
            number y = 2;
            x = Square(x) + y;
            x = Square(Square(x));
            y = x + y;
            y = Square(x) + y;

            return Square(x) + x;
        }

        function void IfElseTest(){
            bool testBool = true;
            bool testBool2 = true;
            string str;

            if (testBool == true) {
                str = "If";
            } else if (testBool2 == true) {
                str = "Else If";
            } else {
                str = "Else";
            }
        }

        function void SwitchTest() {
            number testNum = 2;
            string str;

            switch(testNum) {
                case 1 {
                    str = "Kasse1";
                }
                case 2 {
                    str = "Kasse2";
                }
                default {
                    str = "DenSidste";
                }
            }

        }

        function void WhileTest(){
            bool testBool = true;
            bool testBool2 = true;
            while((testBool == true) or (testBool2 == true)) {
                Simulation.Print("xddinmor");
            }
        }

        function void IndexTest() {
            List<number> numList {1,2,3};
            numList.Add(4);

            number x = numList[1];
        }

        function void Potens() {
            number x = 2^8;
        }

        function void ForTest() {
            List<number> numList {1,2,3};
            for(number x in range numList) {
                Simulation.Print(x);
            }
        }

        constructor Create<Car>(){
            this.length = 10;
            this.acceleration = 200;
        }
    }

    Vehicle Truck {
        string name;

        constructor Create<Truck>(string name){
            this.length = 30;
            this.acceleration = 100;

            this.name = name;
        }
    }

    Node IONode {
        constructor Create<IONode>(){
        }
    }

    Road TownRoad {
        number speedLimit;
        constructor Create<TownRoad>(number speedLimit, number length, Node startNode, Node endNode){
            this.speedLimit = speedLimit;
            this.length = length;
            this.startNode = startNode;
            this.endNode = endNode;
        }
    }
}

//Mandatory "Update" section
//Here the main simulation logic is defined. Works as a foreach loop, looping over all instansiated agents
Simulation Update {
    switch(vehicle.Type){
        case Car{
            Simulation.Print(vehicle.Square(Simulation.CurrentTick));
        }
        default{
            Simulation.Print("Bling Blong");
        }
    }

    //Simulation.Print("Poggers");
}

//Mandatory "Output" section
//Here the user defines what and how data is extracted from the simulation
Simulation Output {
    //Output.Log("EKS DEE");
}