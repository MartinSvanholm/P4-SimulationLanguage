//Mandatory "Environment" section
//This functions as the setup for the simulation
Simulation Environment {

    TownRoad Road1 = Create<TownRoad>(50, 1000, startNode, intersection);
    TownRoad Road2 = Create<TownRoad>(50, 1000, intersection, endNode);

    //Putting the roads in a list
    List<Road> roadList {Road1, Road2};

    //Defining the condition for when to initialize a new car
    InitCondition<Car> {
        //Creates a car every 5 ticks
        if (Simulation.CurrentTick % 5 == 0) {
            Simulation.Agents.Add(Create<Car>());
        }
    }

    //Defining the end condition for the simulation
    EndCondition {
        return Simulation.CurrentTick >= 2000;
    }
}

//Mandatory "behavior" section
//Here the user defines the classes and their behavior
Simulation Behavior {
    //Initializing roads
    Road TownRoad {
        number speedLimit;
        constructor Create<TownRoad>(number speedLimit, number length, Node startNode, Node endNode){
            this.speedLimit = speedLimit;
            this.length = length;
            this.startNode = startNode;
            this.endNode = endNode;
        }
    }

    //Defining the "Car" class
    Vehicle Car {
        Node startNode = Create<INode>();

        function void Random(string h) {

        }

        function void Drive() {
            this.position = 5;
        }

        function bool IsClearToDrive() {

        }
    }

    Node INode {
        number x;
    }
}

//Mandatory "Update" section
//Here the main simulation logic is defined. Works as a foreach loop, looping over all instansiated agents
Simulation Update {

}

//Mandatory "Output" section
//Here the user defines what and how data is extracted from the simulation
Simulation Output {

}